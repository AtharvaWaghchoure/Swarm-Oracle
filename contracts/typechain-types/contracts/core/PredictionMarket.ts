/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace PredictionMarket {
  export type AgentPredictionStruct = {
    agent: AddressLike;
    marketId: BigNumberish;
    prediction: boolean;
    confidence: BigNumberish;
    timestamp: BigNumberish;
    reasoning: string;
  };

  export type AgentPredictionStructOutput = [
    agent: string,
    marketId: bigint,
    prediction: boolean,
    confidence: bigint,
    timestamp: bigint,
    reasoning: string
  ] & {
    agent: string;
    marketId: bigint;
    prediction: boolean;
    confidence: bigint;
    timestamp: bigint;
    reasoning: string;
  };

  export type MarketStruct = {
    id: BigNumberish;
    question: string;
    category: string;
    createdAt: BigNumberish;
    endTime: BigNumberish;
    resolutionTime: BigNumberish;
    resolved: boolean;
    outcome: boolean;
    totalYesAmount: BigNumberish;
    totalNoAmount: BigNumberish;
    totalVolume: BigNumberish;
    creator: AddressLike;
    creatorFee: BigNumberish;
    active: boolean;
  };

  export type MarketStructOutput = [
    id: bigint,
    question: string,
    category: string,
    createdAt: bigint,
    endTime: bigint,
    resolutionTime: bigint,
    resolved: boolean,
    outcome: boolean,
    totalYesAmount: bigint,
    totalNoAmount: bigint,
    totalVolume: bigint,
    creator: string,
    creatorFee: bigint,
    active: boolean
  ] & {
    id: bigint;
    question: string;
    category: string;
    createdAt: bigint;
    endTime: bigint;
    resolutionTime: bigint;
    resolved: boolean;
    outcome: boolean;
    totalYesAmount: bigint;
    totalNoAmount: bigint;
    totalVolume: bigint;
    creator: string;
    creatorFee: bigint;
    active: boolean;
  };

  export type PositionStruct = {
    marketId: BigNumberish;
    user: AddressLike;
    yesAmount: BigNumberish;
    noAmount: BigNumberish;
    claimed: boolean;
  };

  export type PositionStructOutput = [
    marketId: bigint,
    user: string,
    yesAmount: bigint,
    noAmount: bigint,
    claimed: boolean
  ] & {
    marketId: bigint;
    user: string;
    yesAmount: bigint;
    noAmount: bigint;
    claimed: boolean;
  };
}

export interface PredictionMarketInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "agentPredictions"
      | "agentReputation"
      | "authorizedAgents"
      | "bettingToken"
      | "calculateWinnings"
      | "checkUpkeep"
      | "claimWinnings"
      | "createMarket"
      | "feeRecipient"
      | "getAgentPredictions"
      | "getMarket"
      | "getMarketStats"
      | "getMathematicalPrediction"
      | "getPosition"
      | "getPrice"
      | "markets"
      | "maxBetAmount"
      | "minBetAmount"
      | "nextMarketId"
      | "owner"
      | "pause"
      | "pauseMarket"
      | "paused"
      | "performUpkeep"
      | "placeBet"
      | "platformFee"
      | "positions"
      | "rawFulfillRandomWords"
      | "renounceOwnership"
      | "resolveMarket"
      | "setAgentAuthorization"
      | "setBettingLimits"
      | "setPlatformFee"
      | "setSwarmCCIPContract"
      | "setSwarmFunctionsContract"
      | "submitAgentPrediction"
      | "swarmCCIPContract"
      | "swarmFunctionsContract"
      | "syncFromCrossChain"
      | "transferOwnership"
      | "unpause"
      | "updateAgentReputation"
      | "updateMarketWithExternalData"
      | "withdrawFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AgentAuthorized"
      | "AgentPredictionSubmitted"
      | "BetPlaced"
      | "CrossChainSyncReceived"
      | "ExternalDataUpdated"
      | "MarketCreated"
      | "MarketPaused"
      | "MarketResolved"
      | "OwnershipTransferred"
      | "Paused"
      | "PredictionScoreUpdated"
      | "Unpaused"
      | "WinningsClaimed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "agentPredictions",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "agentReputation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedAgents",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bettingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateWinnings",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimWinnings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createMarket",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentPredictions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketStats",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMathematicalPrediction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "markets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxBetAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minBetAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextMarketId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseMarket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "performUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "placeBet",
    values: [BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "platformFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveMarket",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setAgentAuthorization",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBettingLimits",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwarmCCIPContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwarmFunctionsContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitAgentPrediction",
    values: [BigNumberish, boolean, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "swarmCCIPContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swarmFunctionsContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "syncFromCrossChain",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateAgentReputation",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMarketWithExternalData",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "agentPredictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "agentReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedAgents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bettingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateWinnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimWinnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgentPredictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMarket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMarketStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMathematicalPrediction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "markets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxBetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minBetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextMarketId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "placeBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAgentAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBettingLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwarmCCIPContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwarmFunctionsContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitAgentPrediction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swarmCCIPContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swarmFunctionsContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "syncFromCrossChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAgentReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMarketWithExternalData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
}

export namespace AgentAuthorizedEvent {
  export type InputTuple = [agent: AddressLike, authorized: boolean];
  export type OutputTuple = [agent: string, authorized: boolean];
  export interface OutputObject {
    agent: string;
    authorized: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgentPredictionSubmittedEvent {
  export type InputTuple = [
    marketId: BigNumberish,
    agent: AddressLike,
    prediction: boolean,
    confidence: BigNumberish
  ];
  export type OutputTuple = [
    marketId: bigint,
    agent: string,
    prediction: boolean,
    confidence: bigint
  ];
  export interface OutputObject {
    marketId: bigint;
    agent: string;
    prediction: boolean;
    confidence: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BetPlacedEvent {
  export type InputTuple = [
    marketId: BigNumberish,
    user: AddressLike,
    side: boolean,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    marketId: bigint,
    user: string,
    side: boolean,
    amount: bigint
  ];
  export interface OutputObject {
    marketId: bigint;
    user: string;
    side: boolean;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CrossChainSyncReceivedEvent {
  export type InputTuple = [
    marketId: BigNumberish,
    totalVolume: BigNumberish,
    avgPrice: BigNumberish
  ];
  export type OutputTuple = [
    marketId: bigint,
    totalVolume: bigint,
    avgPrice: bigint
  ];
  export interface OutputObject {
    marketId: bigint;
    totalVolume: bigint;
    avgPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExternalDataUpdatedEvent {
  export type InputTuple = [
    marketId: BigNumberish,
    sentiment: BigNumberish,
    volume: BigNumberish,
    price: BigNumberish
  ];
  export type OutputTuple = [
    marketId: bigint,
    sentiment: bigint,
    volume: bigint,
    price: bigint
  ];
  export interface OutputObject {
    marketId: bigint;
    sentiment: bigint;
    volume: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketCreatedEvent {
  export type InputTuple = [
    marketId: BigNumberish,
    question: string,
    category: string,
    endTime: BigNumberish,
    creator: AddressLike
  ];
  export type OutputTuple = [
    marketId: bigint,
    question: string,
    category: string,
    endTime: bigint,
    creator: string
  ];
  export interface OutputObject {
    marketId: bigint;
    question: string;
    category: string;
    endTime: bigint;
    creator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketPausedEvent {
  export type InputTuple = [marketId: BigNumberish];
  export type OutputTuple = [marketId: bigint];
  export interface OutputObject {
    marketId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketResolvedEvent {
  export type InputTuple = [
    marketId: BigNumberish,
    outcome: boolean,
    totalVolume: BigNumberish
  ];
  export type OutputTuple = [
    marketId: bigint,
    outcome: boolean,
    totalVolume: bigint
  ];
  export interface OutputObject {
    marketId: bigint;
    outcome: boolean;
    totalVolume: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PredictionScoreUpdatedEvent {
  export type InputTuple = [
    marketId: BigNumberish,
    predictionScore: BigNumberish
  ];
  export type OutputTuple = [marketId: bigint, predictionScore: bigint];
  export interface OutputObject {
    marketId: bigint;
    predictionScore: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WinningsClaimedEvent {
  export type InputTuple = [
    marketId: BigNumberish,
    user: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [marketId: bigint, user: string, amount: bigint];
  export interface OutputObject {
    marketId: bigint;
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PredictionMarket extends BaseContract {
  connect(runner?: ContractRunner | null): PredictionMarket;
  waitForDeployment(): Promise<this>;

  interface: PredictionMarketInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  agentPredictions: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, bigint, boolean, bigint, bigint, string] & {
        agent: string;
        marketId: bigint;
        prediction: boolean;
        confidence: bigint;
        timestamp: bigint;
        reasoning: string;
      }
    ],
    "view"
  >;

  agentReputation: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  authorizedAgents: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  bettingToken: TypedContractMethod<[], [string], "view">;

  calculateWinnings: TypedContractMethod<
    [_marketId: BigNumberish, _user: AddressLike],
    [bigint],
    "view"
  >;

  checkUpkeep: TypedContractMethod<
    [arg0: BytesLike],
    [[boolean, string] & { upkeepNeeded: boolean; performData: string }],
    "view"
  >;

  claimWinnings: TypedContractMethod<
    [_marketId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createMarket: TypedContractMethod<
    [
      _question: string,
      _category: string,
      _endTime: BigNumberish,
      _creatorFee: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  feeRecipient: TypedContractMethod<[], [string], "view">;

  getAgentPredictions: TypedContractMethod<
    [_marketId: BigNumberish],
    [PredictionMarket.AgentPredictionStructOutput[]],
    "view"
  >;

  getMarket: TypedContractMethod<
    [_marketId: BigNumberish],
    [PredictionMarket.MarketStructOutput],
    "view"
  >;

  getMarketStats: TypedContractMethod<
    [_marketId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        totalVolume: bigint;
        yesVolume: bigint;
        noVolume: bigint;
        currentYesPrice: bigint;
        currentNoPrice: bigint;
      }
    ],
    "view"
  >;

  getMathematicalPrediction: TypedContractMethod<
    [_marketId: BigNumberish],
    [
      [bigint, bigint, string] & {
        predictionScore: bigint;
        confidence: bigint;
        reasoning: string;
      }
    ],
    "view"
  >;

  getPosition: TypedContractMethod<
    [_marketId: BigNumberish, _user: AddressLike],
    [PredictionMarket.PositionStructOutput],
    "view"
  >;

  getPrice: TypedContractMethod<
    [_marketId: BigNumberish, _side: boolean],
    [bigint],
    "view"
  >;

  markets: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        boolean
      ] & {
        id: bigint;
        question: string;
        category: string;
        createdAt: bigint;
        endTime: bigint;
        resolutionTime: bigint;
        resolved: boolean;
        outcome: boolean;
        totalYesAmount: bigint;
        totalNoAmount: bigint;
        totalVolume: bigint;
        creator: string;
        creatorFee: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  maxBetAmount: TypedContractMethod<[], [bigint], "view">;

  minBetAmount: TypedContractMethod<[], [bigint], "view">;

  nextMarketId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  pauseMarket: TypedContractMethod<
    [_marketId: BigNumberish],
    [void],
    "nonpayable"
  >;

  paused: TypedContractMethod<[], [boolean], "view">;

  performUpkeep: TypedContractMethod<
    [performData: BytesLike],
    [void],
    "nonpayable"
  >;

  placeBet: TypedContractMethod<
    [_marketId: BigNumberish, _side: boolean, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  platformFee: TypedContractMethod<[], [bigint], "view">;

  positions: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [bigint, string, bigint, bigint, boolean] & {
        marketId: bigint;
        user: string;
        yesAmount: bigint;
        noAmount: bigint;
        claimed: boolean;
      }
    ],
    "view"
  >;

  rawFulfillRandomWords: TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  resolveMarket: TypedContractMethod<
    [_marketId: BigNumberish, _outcome: boolean],
    [void],
    "nonpayable"
  >;

  setAgentAuthorization: TypedContractMethod<
    [_agent: AddressLike, _authorized: boolean],
    [void],
    "nonpayable"
  >;

  setBettingLimits: TypedContractMethod<
    [_minAmount: BigNumberish, _maxAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPlatformFee: TypedContractMethod<
    [_fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSwarmCCIPContract: TypedContractMethod<
    [_ccipContract: AddressLike],
    [void],
    "nonpayable"
  >;

  setSwarmFunctionsContract: TypedContractMethod<
    [_functionsContract: AddressLike],
    [void],
    "nonpayable"
  >;

  submitAgentPrediction: TypedContractMethod<
    [
      _marketId: BigNumberish,
      _prediction: boolean,
      _confidence: BigNumberish,
      _reasoning: string
    ],
    [void],
    "nonpayable"
  >;

  swarmCCIPContract: TypedContractMethod<[], [string], "view">;

  swarmFunctionsContract: TypedContractMethod<[], [string], "view">;

  syncFromCrossChain: TypedContractMethod<
    [
      _marketId: BigNumberish,
      _totalVolume: BigNumberish,
      _avgPrice: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateAgentReputation: TypedContractMethod<
    [_agent: AddressLike, _newReputation: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateMarketWithExternalData: TypedContractMethod<
    [
      _marketId: BigNumberish,
      sentiment: BigNumberish,
      volume: BigNumberish,
      price: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  withdrawFees: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "agentPredictions"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, bigint, boolean, bigint, bigint, string] & {
        agent: string;
        marketId: bigint;
        prediction: boolean;
        confidence: bigint;
        timestamp: bigint;
        reasoning: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "agentReputation"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "authorizedAgents"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "bettingToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "calculateWinnings"
  ): TypedContractMethod<
    [_marketId: BigNumberish, _user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkUpkeep"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [[boolean, string] & { upkeepNeeded: boolean; performData: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimWinnings"
  ): TypedContractMethod<[_marketId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createMarket"
  ): TypedContractMethod<
    [
      _question: string,
      _category: string,
      _endTime: BigNumberish,
      _creatorFee: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "feeRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAgentPredictions"
  ): TypedContractMethod<
    [_marketId: BigNumberish],
    [PredictionMarket.AgentPredictionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMarket"
  ): TypedContractMethod<
    [_marketId: BigNumberish],
    [PredictionMarket.MarketStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMarketStats"
  ): TypedContractMethod<
    [_marketId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        totalVolume: bigint;
        yesVolume: bigint;
        noVolume: bigint;
        currentYesPrice: bigint;
        currentNoPrice: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMathematicalPrediction"
  ): TypedContractMethod<
    [_marketId: BigNumberish],
    [
      [bigint, bigint, string] & {
        predictionScore: bigint;
        confidence: bigint;
        reasoning: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPosition"
  ): TypedContractMethod<
    [_marketId: BigNumberish, _user: AddressLike],
    [PredictionMarket.PositionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPrice"
  ): TypedContractMethod<
    [_marketId: BigNumberish, _side: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "markets"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        boolean
      ] & {
        id: bigint;
        question: string;
        category: string;
        createdAt: bigint;
        endTime: bigint;
        resolutionTime: bigint;
        resolved: boolean;
        outcome: boolean;
        totalYesAmount: bigint;
        totalNoAmount: bigint;
        totalVolume: bigint;
        creator: string;
        creatorFee: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "maxBetAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minBetAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextMarketId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pauseMarket"
  ): TypedContractMethod<[_marketId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "performUpkeep"
  ): TypedContractMethod<[performData: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "placeBet"
  ): TypedContractMethod<
    [_marketId: BigNumberish, _side: boolean, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "platformFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "positions"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [bigint, string, bigint, bigint, boolean] & {
        marketId: bigint;
        user: string;
        yesAmount: bigint;
        noAmount: bigint;
        claimed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "rawFulfillRandomWords"
  ): TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resolveMarket"
  ): TypedContractMethod<
    [_marketId: BigNumberish, _outcome: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAgentAuthorization"
  ): TypedContractMethod<
    [_agent: AddressLike, _authorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBettingLimits"
  ): TypedContractMethod<
    [_minAmount: BigNumberish, _maxAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPlatformFee"
  ): TypedContractMethod<[_fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSwarmCCIPContract"
  ): TypedContractMethod<[_ccipContract: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSwarmFunctionsContract"
  ): TypedContractMethod<
    [_functionsContract: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitAgentPrediction"
  ): TypedContractMethod<
    [
      _marketId: BigNumberish,
      _prediction: boolean,
      _confidence: BigNumberish,
      _reasoning: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swarmCCIPContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "swarmFunctionsContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "syncFromCrossChain"
  ): TypedContractMethod<
    [
      _marketId: BigNumberish,
      _totalVolume: BigNumberish,
      _avgPrice: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateAgentReputation"
  ): TypedContractMethod<
    [_agent: AddressLike, _newReputation: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateMarketWithExternalData"
  ): TypedContractMethod<
    [
      _marketId: BigNumberish,
      sentiment: BigNumberish,
      volume: BigNumberish,
      price: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawFees"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "AgentAuthorized"
  ): TypedContractEvent<
    AgentAuthorizedEvent.InputTuple,
    AgentAuthorizedEvent.OutputTuple,
    AgentAuthorizedEvent.OutputObject
  >;
  getEvent(
    key: "AgentPredictionSubmitted"
  ): TypedContractEvent<
    AgentPredictionSubmittedEvent.InputTuple,
    AgentPredictionSubmittedEvent.OutputTuple,
    AgentPredictionSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "BetPlaced"
  ): TypedContractEvent<
    BetPlacedEvent.InputTuple,
    BetPlacedEvent.OutputTuple,
    BetPlacedEvent.OutputObject
  >;
  getEvent(
    key: "CrossChainSyncReceived"
  ): TypedContractEvent<
    CrossChainSyncReceivedEvent.InputTuple,
    CrossChainSyncReceivedEvent.OutputTuple,
    CrossChainSyncReceivedEvent.OutputObject
  >;
  getEvent(
    key: "ExternalDataUpdated"
  ): TypedContractEvent<
    ExternalDataUpdatedEvent.InputTuple,
    ExternalDataUpdatedEvent.OutputTuple,
    ExternalDataUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MarketCreated"
  ): TypedContractEvent<
    MarketCreatedEvent.InputTuple,
    MarketCreatedEvent.OutputTuple,
    MarketCreatedEvent.OutputObject
  >;
  getEvent(
    key: "MarketPaused"
  ): TypedContractEvent<
    MarketPausedEvent.InputTuple,
    MarketPausedEvent.OutputTuple,
    MarketPausedEvent.OutputObject
  >;
  getEvent(
    key: "MarketResolved"
  ): TypedContractEvent<
    MarketResolvedEvent.InputTuple,
    MarketResolvedEvent.OutputTuple,
    MarketResolvedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PredictionScoreUpdated"
  ): TypedContractEvent<
    PredictionScoreUpdatedEvent.InputTuple,
    PredictionScoreUpdatedEvent.OutputTuple,
    PredictionScoreUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "WinningsClaimed"
  ): TypedContractEvent<
    WinningsClaimedEvent.InputTuple,
    WinningsClaimedEvent.OutputTuple,
    WinningsClaimedEvent.OutputObject
  >;

  filters: {
    "AgentAuthorized(address,bool)": TypedContractEvent<
      AgentAuthorizedEvent.InputTuple,
      AgentAuthorizedEvent.OutputTuple,
      AgentAuthorizedEvent.OutputObject
    >;
    AgentAuthorized: TypedContractEvent<
      AgentAuthorizedEvent.InputTuple,
      AgentAuthorizedEvent.OutputTuple,
      AgentAuthorizedEvent.OutputObject
    >;

    "AgentPredictionSubmitted(uint256,address,bool,uint256)": TypedContractEvent<
      AgentPredictionSubmittedEvent.InputTuple,
      AgentPredictionSubmittedEvent.OutputTuple,
      AgentPredictionSubmittedEvent.OutputObject
    >;
    AgentPredictionSubmitted: TypedContractEvent<
      AgentPredictionSubmittedEvent.InputTuple,
      AgentPredictionSubmittedEvent.OutputTuple,
      AgentPredictionSubmittedEvent.OutputObject
    >;

    "BetPlaced(uint256,address,bool,uint256)": TypedContractEvent<
      BetPlacedEvent.InputTuple,
      BetPlacedEvent.OutputTuple,
      BetPlacedEvent.OutputObject
    >;
    BetPlaced: TypedContractEvent<
      BetPlacedEvent.InputTuple,
      BetPlacedEvent.OutputTuple,
      BetPlacedEvent.OutputObject
    >;

    "CrossChainSyncReceived(uint256,uint256,uint256)": TypedContractEvent<
      CrossChainSyncReceivedEvent.InputTuple,
      CrossChainSyncReceivedEvent.OutputTuple,
      CrossChainSyncReceivedEvent.OutputObject
    >;
    CrossChainSyncReceived: TypedContractEvent<
      CrossChainSyncReceivedEvent.InputTuple,
      CrossChainSyncReceivedEvent.OutputTuple,
      CrossChainSyncReceivedEvent.OutputObject
    >;

    "ExternalDataUpdated(uint256,int256,uint256,uint256)": TypedContractEvent<
      ExternalDataUpdatedEvent.InputTuple,
      ExternalDataUpdatedEvent.OutputTuple,
      ExternalDataUpdatedEvent.OutputObject
    >;
    ExternalDataUpdated: TypedContractEvent<
      ExternalDataUpdatedEvent.InputTuple,
      ExternalDataUpdatedEvent.OutputTuple,
      ExternalDataUpdatedEvent.OutputObject
    >;

    "MarketCreated(uint256,string,string,uint256,address)": TypedContractEvent<
      MarketCreatedEvent.InputTuple,
      MarketCreatedEvent.OutputTuple,
      MarketCreatedEvent.OutputObject
    >;
    MarketCreated: TypedContractEvent<
      MarketCreatedEvent.InputTuple,
      MarketCreatedEvent.OutputTuple,
      MarketCreatedEvent.OutputObject
    >;

    "MarketPaused(uint256)": TypedContractEvent<
      MarketPausedEvent.InputTuple,
      MarketPausedEvent.OutputTuple,
      MarketPausedEvent.OutputObject
    >;
    MarketPaused: TypedContractEvent<
      MarketPausedEvent.InputTuple,
      MarketPausedEvent.OutputTuple,
      MarketPausedEvent.OutputObject
    >;

    "MarketResolved(uint256,bool,uint256)": TypedContractEvent<
      MarketResolvedEvent.InputTuple,
      MarketResolvedEvent.OutputTuple,
      MarketResolvedEvent.OutputObject
    >;
    MarketResolved: TypedContractEvent<
      MarketResolvedEvent.InputTuple,
      MarketResolvedEvent.OutputTuple,
      MarketResolvedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PredictionScoreUpdated(uint256,int256)": TypedContractEvent<
      PredictionScoreUpdatedEvent.InputTuple,
      PredictionScoreUpdatedEvent.OutputTuple,
      PredictionScoreUpdatedEvent.OutputObject
    >;
    PredictionScoreUpdated: TypedContractEvent<
      PredictionScoreUpdatedEvent.InputTuple,
      PredictionScoreUpdatedEvent.OutputTuple,
      PredictionScoreUpdatedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "WinningsClaimed(uint256,address,uint256)": TypedContractEvent<
      WinningsClaimedEvent.InputTuple,
      WinningsClaimedEvent.OutputTuple,
      WinningsClaimedEvent.OutputObject
    >;
    WinningsClaimed: TypedContractEvent<
      WinningsClaimedEvent.InputTuple,
      WinningsClaimedEvent.OutputTuple,
      WinningsClaimedEvent.OutputObject
    >;
  };
}
