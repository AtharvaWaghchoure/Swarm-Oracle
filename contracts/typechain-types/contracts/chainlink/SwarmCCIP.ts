/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace Client {
  export type EVMTokenAmountStruct = {
    token: AddressLike;
    amount: BigNumberish;
  };

  export type EVMTokenAmountStructOutput = [token: string, amount: bigint] & {
    token: string;
    amount: bigint;
  };

  export type Any2EVMMessageStruct = {
    messageId: BytesLike;
    sourceChainSelector: BigNumberish;
    sender: BytesLike;
    data: BytesLike;
    destTokenAmounts: Client.EVMTokenAmountStruct[];
  };

  export type Any2EVMMessageStructOutput = [
    messageId: string,
    sourceChainSelector: bigint,
    sender: string,
    data: string,
    destTokenAmounts: Client.EVMTokenAmountStructOutput[]
  ] & {
    messageId: string;
    sourceChainSelector: bigint;
    sender: string;
    data: string;
    destTokenAmounts: Client.EVMTokenAmountStructOutput[];
  };
}

export declare namespace SwarmCCIP {
  export type CrossChainMarketStruct = {
    localMarketId: BigNumberish;
    remoteMarketId: BigNumberish;
    remoteChainSelector: BigNumberish;
    remoteContract: AddressLike;
    totalLiquidity: BigNumberish;
    active: boolean;
  };

  export type CrossChainMarketStructOutput = [
    localMarketId: bigint,
    remoteMarketId: bigint,
    remoteChainSelector: bigint,
    remoteContract: string,
    totalLiquidity: bigint,
    active: boolean
  ] & {
    localMarketId: bigint;
    remoteMarketId: bigint;
    remoteChainSelector: bigint;
    remoteContract: string;
    totalLiquidity: bigint;
    active: boolean;
  };

  export type LiquidityBridgeStruct = {
    user: AddressLike;
    amount: BigNumberish;
    sourceChain: BigNumberish;
    destinationChain: BigNumberish;
    timestamp: BigNumberish;
    completed: boolean;
  };

  export type LiquidityBridgeStructOutput = [
    user: string,
    amount: bigint,
    sourceChain: bigint,
    destinationChain: bigint,
    timestamp: bigint,
    completed: boolean
  ] & {
    user: string;
    amount: bigint;
    sourceChain: bigint;
    destinationChain: bigint;
    timestamp: bigint;
    completed: boolean;
  };
}

export interface SwarmCCIPInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOwnership"
      | "addSupportedChain"
      | "authorizedAgents"
      | "bridgeFee"
      | "bridgeLiquidity"
      | "bridgeToken"
      | "calculateCCIPFee"
      | "ccipReceive"
      | "chainContracts"
      | "createCrossChainMarket"
      | "crossChainMarkets"
      | "getCrossChainMarket"
      | "getLiquidityBridge"
      | "getRouter"
      | "liquidityBridges"
      | "liquidityPool"
      | "nextBridgeId"
      | "owner"
      | "pause"
      | "paused"
      | "removeSupportedChain"
      | "sendAgentCoordination"
      | "setAuthorizedAgent"
      | "setBridgeFee"
      | "setLiquidityPool"
      | "supportedChains"
      | "supportsInterface"
      | "syncMarketData"
      | "syncMarketResolution"
      | "transferOwnership"
      | "unpause"
      | "withdrawNative"
      | "withdrawTokens"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CrossChainAgentPrediction"
      | "CrossChainMarketCreated"
      | "CrossChainMarketResolved"
      | "CrossChainMarketSynced"
      | "CrossChainMessageReceived"
      | "CrossChainMessageSent"
      | "LiquidityBridgeCompleted"
      | "LiquidityBridgeInitiated"
      | "OwnershipTransferRequested"
      | "OwnershipTransferred"
      | "Paused"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addSupportedChain",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedAgents",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "bridgeFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bridgeLiquidity",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateCCIPFee",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ccipReceive",
    values: [Client.Any2EVMMessageStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "chainContracts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCrossChainMarket",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "crossChainMarkets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCrossChainMarket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityBridge",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getRouter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidityBridges",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextBridgeId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeSupportedChain",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendAgentCoordination",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedAgent",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBridgeFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityPool",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedChains",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "syncMarketData",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "syncMarketResolution",
    values: [BigNumberish, BigNumberish, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawNative",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSupportedChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedAgents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bridgeFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bridgeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateCCIPFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ccipReceive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCrossChainMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "crossChainMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCrossChainMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidityBridges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextBridgeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeSupportedChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendAgentCoordination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBridgeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedChains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "syncMarketData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "syncMarketResolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;
}

export namespace CrossChainAgentPredictionEvent {
  export type InputTuple = [
    marketId: BigNumberish,
    sourceChain: BigNumberish,
    agent: AddressLike,
    prediction: boolean,
    confidence: BigNumberish,
    reasoning: string
  ];
  export type OutputTuple = [
    marketId: bigint,
    sourceChain: bigint,
    agent: string,
    prediction: boolean,
    confidence: bigint,
    reasoning: string
  ];
  export interface OutputObject {
    marketId: bigint;
    sourceChain: bigint;
    agent: string;
    prediction: boolean;
    confidence: bigint;
    reasoning: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CrossChainMarketCreatedEvent {
  export type InputTuple = [
    localMarketId: BigNumberish,
    remoteMarketId: BigNumberish,
    remoteChain: BigNumberish
  ];
  export type OutputTuple = [
    localMarketId: bigint,
    remoteMarketId: bigint,
    remoteChain: bigint
  ];
  export interface OutputObject {
    localMarketId: bigint;
    remoteMarketId: bigint;
    remoteChain: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CrossChainMarketResolvedEvent {
  export type InputTuple = [
    marketId: BigNumberish,
    sourceChain: BigNumberish,
    outcome: boolean,
    totalVolume: BigNumberish,
    resolutionTime: BigNumberish,
    evidence: string
  ];
  export type OutputTuple = [
    marketId: bigint,
    sourceChain: bigint,
    outcome: boolean,
    totalVolume: bigint,
    resolutionTime: bigint,
    evidence: string
  ];
  export interface OutputObject {
    marketId: bigint;
    sourceChain: bigint;
    outcome: boolean;
    totalVolume: bigint;
    resolutionTime: bigint;
    evidence: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CrossChainMarketSyncedEvent {
  export type InputTuple = [
    marketId: BigNumberish,
    sourceChain: BigNumberish,
    totalVolume: BigNumberish,
    avgPrice: BigNumberish,
    sentiment: BigNumberish
  ];
  export type OutputTuple = [
    marketId: bigint,
    sourceChain: bigint,
    totalVolume: bigint,
    avgPrice: bigint,
    sentiment: bigint
  ];
  export interface OutputObject {
    marketId: bigint;
    sourceChain: bigint;
    totalVolume: bigint;
    avgPrice: bigint;
    sentiment: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CrossChainMessageReceivedEvent {
  export type InputTuple = [
    messageId: BytesLike,
    sourceChain: BigNumberish,
    messageType: BigNumberish
  ];
  export type OutputTuple = [
    messageId: string,
    sourceChain: bigint,
    messageType: bigint
  ];
  export interface OutputObject {
    messageId: string;
    sourceChain: bigint;
    messageType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CrossChainMessageSentEvent {
  export type InputTuple = [
    messageId: BytesLike,
    destinationChain: BigNumberish,
    messageType: BigNumberish
  ];
  export type OutputTuple = [
    messageId: string,
    destinationChain: bigint,
    messageType: bigint
  ];
  export interface OutputObject {
    messageId: string;
    destinationChain: bigint;
    messageType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityBridgeCompletedEvent {
  export type InputTuple = [
    bridgeId: BytesLike,
    user: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [bridgeId: string, user: string, amount: bigint];
  export interface OutputObject {
    bridgeId: string;
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityBridgeInitiatedEvent {
  export type InputTuple = [
    bridgeId: BytesLike,
    user: AddressLike,
    amount: BigNumberish,
    sourceChain: BigNumberish,
    destinationChain: BigNumberish
  ];
  export type OutputTuple = [
    bridgeId: string,
    user: string,
    amount: bigint,
    sourceChain: bigint,
    destinationChain: bigint
  ];
  export interface OutputObject {
    bridgeId: string;
    user: string;
    amount: bigint;
    sourceChain: bigint;
    destinationChain: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferRequestedEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SwarmCCIP extends BaseContract {
  connect(runner?: ContractRunner | null): SwarmCCIP;
  waitForDeployment(): Promise<this>;

  interface: SwarmCCIPInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  addSupportedChain: TypedContractMethod<
    [_chainSelector: BigNumberish, _contractAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  authorizedAgents: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  bridgeFee: TypedContractMethod<[], [bigint], "view">;

  bridgeLiquidity: TypedContractMethod<
    [
      _amount: BigNumberish,
      _destinationChain: BigNumberish,
      _receiver: AddressLike
    ],
    [string],
    "payable"
  >;

  bridgeToken: TypedContractMethod<[], [string], "view">;

  calculateCCIPFee: TypedContractMethod<
    [_destinationChain: BigNumberish, _data: BytesLike],
    [bigint],
    "view"
  >;

  ccipReceive: TypedContractMethod<
    [message: Client.Any2EVMMessageStruct],
    [void],
    "nonpayable"
  >;

  chainContracts: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  createCrossChainMarket: TypedContractMethod<
    [
      _localMarketId: BigNumberish,
      _remoteMarketId: BigNumberish,
      _remoteChainSelector: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  crossChainMarkets: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, string, bigint, boolean] & {
        localMarketId: bigint;
        remoteMarketId: bigint;
        remoteChainSelector: bigint;
        remoteContract: string;
        totalLiquidity: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  getCrossChainMarket: TypedContractMethod<
    [_marketId: BigNumberish],
    [SwarmCCIP.CrossChainMarketStructOutput],
    "view"
  >;

  getLiquidityBridge: TypedContractMethod<
    [_bridgeId: BytesLike],
    [SwarmCCIP.LiquidityBridgeStructOutput],
    "view"
  >;

  getRouter: TypedContractMethod<[], [string], "view">;

  liquidityBridges: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, bigint, bigint, bigint, boolean] & {
        user: string;
        amount: bigint;
        sourceChain: bigint;
        destinationChain: bigint;
        timestamp: bigint;
        completed: boolean;
      }
    ],
    "view"
  >;

  liquidityPool: TypedContractMethod<[], [string], "view">;

  nextBridgeId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  removeSupportedChain: TypedContractMethod<
    [_chainSelector: BigNumberish],
    [void],
    "nonpayable"
  >;

  sendAgentCoordination: TypedContractMethod<
    [
      _destinationChain: BigNumberish,
      _marketId: BigNumberish,
      _coordinationData: BytesLike
    ],
    [void],
    "payable"
  >;

  setAuthorizedAgent: TypedContractMethod<
    [_agent: AddressLike, _authorized: boolean],
    [void],
    "nonpayable"
  >;

  setBridgeFee: TypedContractMethod<[_fee: BigNumberish], [void], "nonpayable">;

  setLiquidityPool: TypedContractMethod<
    [_pool: AddressLike],
    [void],
    "nonpayable"
  >;

  supportedChains: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  syncMarketData: TypedContractMethod<
    [
      _marketId: BigNumberish,
      _destinationChain: BigNumberish,
      _marketData: BytesLike
    ],
    [void],
    "payable"
  >;

  syncMarketResolution: TypedContractMethod<
    [
      _marketId: BigNumberish,
      _destinationChain: BigNumberish,
      _outcome: boolean,
      _resolutionData: BytesLike
    ],
    [void],
    "payable"
  >;

  transferOwnership: TypedContractMethod<
    [to: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  withdrawNative: TypedContractMethod<[], [void], "nonpayable">;

  withdrawTokens: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addSupportedChain"
  ): TypedContractMethod<
    [_chainSelector: BigNumberish, _contractAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "authorizedAgents"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "bridgeFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bridgeLiquidity"
  ): TypedContractMethod<
    [
      _amount: BigNumberish,
      _destinationChain: BigNumberish,
      _receiver: AddressLike
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "bridgeToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "calculateCCIPFee"
  ): TypedContractMethod<
    [_destinationChain: BigNumberish, _data: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "ccipReceive"
  ): TypedContractMethod<
    [message: Client.Any2EVMMessageStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "chainContracts"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "createCrossChainMarket"
  ): TypedContractMethod<
    [
      _localMarketId: BigNumberish,
      _remoteMarketId: BigNumberish,
      _remoteChainSelector: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "crossChainMarkets"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, string, bigint, boolean] & {
        localMarketId: bigint;
        remoteMarketId: bigint;
        remoteChainSelector: bigint;
        remoteContract: string;
        totalLiquidity: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCrossChainMarket"
  ): TypedContractMethod<
    [_marketId: BigNumberish],
    [SwarmCCIP.CrossChainMarketStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLiquidityBridge"
  ): TypedContractMethod<
    [_bridgeId: BytesLike],
    [SwarmCCIP.LiquidityBridgeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "liquidityBridges"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, bigint, bigint, bigint, boolean] & {
        user: string;
        amount: bigint;
        sourceChain: bigint;
        destinationChain: bigint;
        timestamp: bigint;
        completed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "liquidityPool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nextBridgeId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeSupportedChain"
  ): TypedContractMethod<[_chainSelector: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sendAgentCoordination"
  ): TypedContractMethod<
    [
      _destinationChain: BigNumberish,
      _marketId: BigNumberish,
      _coordinationData: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setAuthorizedAgent"
  ): TypedContractMethod<
    [_agent: AddressLike, _authorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBridgeFee"
  ): TypedContractMethod<[_fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLiquidityPool"
  ): TypedContractMethod<[_pool: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportedChains"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "syncMarketData"
  ): TypedContractMethod<
    [
      _marketId: BigNumberish,
      _destinationChain: BigNumberish,
      _marketData: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "syncMarketResolution"
  ): TypedContractMethod<
    [
      _marketId: BigNumberish,
      _destinationChain: BigNumberish,
      _outcome: boolean,
      _resolutionData: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawNative"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawTokens"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CrossChainAgentPrediction"
  ): TypedContractEvent<
    CrossChainAgentPredictionEvent.InputTuple,
    CrossChainAgentPredictionEvent.OutputTuple,
    CrossChainAgentPredictionEvent.OutputObject
  >;
  getEvent(
    key: "CrossChainMarketCreated"
  ): TypedContractEvent<
    CrossChainMarketCreatedEvent.InputTuple,
    CrossChainMarketCreatedEvent.OutputTuple,
    CrossChainMarketCreatedEvent.OutputObject
  >;
  getEvent(
    key: "CrossChainMarketResolved"
  ): TypedContractEvent<
    CrossChainMarketResolvedEvent.InputTuple,
    CrossChainMarketResolvedEvent.OutputTuple,
    CrossChainMarketResolvedEvent.OutputObject
  >;
  getEvent(
    key: "CrossChainMarketSynced"
  ): TypedContractEvent<
    CrossChainMarketSyncedEvent.InputTuple,
    CrossChainMarketSyncedEvent.OutputTuple,
    CrossChainMarketSyncedEvent.OutputObject
  >;
  getEvent(
    key: "CrossChainMessageReceived"
  ): TypedContractEvent<
    CrossChainMessageReceivedEvent.InputTuple,
    CrossChainMessageReceivedEvent.OutputTuple,
    CrossChainMessageReceivedEvent.OutputObject
  >;
  getEvent(
    key: "CrossChainMessageSent"
  ): TypedContractEvent<
    CrossChainMessageSentEvent.InputTuple,
    CrossChainMessageSentEvent.OutputTuple,
    CrossChainMessageSentEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityBridgeCompleted"
  ): TypedContractEvent<
    LiquidityBridgeCompletedEvent.InputTuple,
    LiquidityBridgeCompletedEvent.OutputTuple,
    LiquidityBridgeCompletedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityBridgeInitiated"
  ): TypedContractEvent<
    LiquidityBridgeInitiatedEvent.InputTuple,
    LiquidityBridgeInitiatedEvent.OutputTuple,
    LiquidityBridgeInitiatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferRequested"
  ): TypedContractEvent<
    OwnershipTransferRequestedEvent.InputTuple,
    OwnershipTransferRequestedEvent.OutputTuple,
    OwnershipTransferRequestedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "CrossChainAgentPrediction(uint256,uint64,address,bool,uint256,string)": TypedContractEvent<
      CrossChainAgentPredictionEvent.InputTuple,
      CrossChainAgentPredictionEvent.OutputTuple,
      CrossChainAgentPredictionEvent.OutputObject
    >;
    CrossChainAgentPrediction: TypedContractEvent<
      CrossChainAgentPredictionEvent.InputTuple,
      CrossChainAgentPredictionEvent.OutputTuple,
      CrossChainAgentPredictionEvent.OutputObject
    >;

    "CrossChainMarketCreated(uint256,uint256,uint64)": TypedContractEvent<
      CrossChainMarketCreatedEvent.InputTuple,
      CrossChainMarketCreatedEvent.OutputTuple,
      CrossChainMarketCreatedEvent.OutputObject
    >;
    CrossChainMarketCreated: TypedContractEvent<
      CrossChainMarketCreatedEvent.InputTuple,
      CrossChainMarketCreatedEvent.OutputTuple,
      CrossChainMarketCreatedEvent.OutputObject
    >;

    "CrossChainMarketResolved(uint256,uint64,bool,uint256,uint256,string)": TypedContractEvent<
      CrossChainMarketResolvedEvent.InputTuple,
      CrossChainMarketResolvedEvent.OutputTuple,
      CrossChainMarketResolvedEvent.OutputObject
    >;
    CrossChainMarketResolved: TypedContractEvent<
      CrossChainMarketResolvedEvent.InputTuple,
      CrossChainMarketResolvedEvent.OutputTuple,
      CrossChainMarketResolvedEvent.OutputObject
    >;

    "CrossChainMarketSynced(uint256,uint64,uint256,uint256,int256)": TypedContractEvent<
      CrossChainMarketSyncedEvent.InputTuple,
      CrossChainMarketSyncedEvent.OutputTuple,
      CrossChainMarketSyncedEvent.OutputObject
    >;
    CrossChainMarketSynced: TypedContractEvent<
      CrossChainMarketSyncedEvent.InputTuple,
      CrossChainMarketSyncedEvent.OutputTuple,
      CrossChainMarketSyncedEvent.OutputObject
    >;

    "CrossChainMessageReceived(bytes32,uint64,uint8)": TypedContractEvent<
      CrossChainMessageReceivedEvent.InputTuple,
      CrossChainMessageReceivedEvent.OutputTuple,
      CrossChainMessageReceivedEvent.OutputObject
    >;
    CrossChainMessageReceived: TypedContractEvent<
      CrossChainMessageReceivedEvent.InputTuple,
      CrossChainMessageReceivedEvent.OutputTuple,
      CrossChainMessageReceivedEvent.OutputObject
    >;

    "CrossChainMessageSent(bytes32,uint64,uint8)": TypedContractEvent<
      CrossChainMessageSentEvent.InputTuple,
      CrossChainMessageSentEvent.OutputTuple,
      CrossChainMessageSentEvent.OutputObject
    >;
    CrossChainMessageSent: TypedContractEvent<
      CrossChainMessageSentEvent.InputTuple,
      CrossChainMessageSentEvent.OutputTuple,
      CrossChainMessageSentEvent.OutputObject
    >;

    "LiquidityBridgeCompleted(bytes32,address,uint256)": TypedContractEvent<
      LiquidityBridgeCompletedEvent.InputTuple,
      LiquidityBridgeCompletedEvent.OutputTuple,
      LiquidityBridgeCompletedEvent.OutputObject
    >;
    LiquidityBridgeCompleted: TypedContractEvent<
      LiquidityBridgeCompletedEvent.InputTuple,
      LiquidityBridgeCompletedEvent.OutputTuple,
      LiquidityBridgeCompletedEvent.OutputObject
    >;

    "LiquidityBridgeInitiated(bytes32,address,uint256,uint64,uint64)": TypedContractEvent<
      LiquidityBridgeInitiatedEvent.InputTuple,
      LiquidityBridgeInitiatedEvent.OutputTuple,
      LiquidityBridgeInitiatedEvent.OutputObject
    >;
    LiquidityBridgeInitiated: TypedContractEvent<
      LiquidityBridgeInitiatedEvent.InputTuple,
      LiquidityBridgeInitiatedEvent.OutputTuple,
      LiquidityBridgeInitiatedEvent.OutputObject
    >;

    "OwnershipTransferRequested(address,address)": TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;
    OwnershipTransferRequested: TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
