/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace SwarmFunctions {
  export type MarketDataStruct = {
    price: BigNumberish;
    volume24h: BigNumberish;
    priceChange24h: BigNumberish;
    timestamp: BigNumberish;
    asset: string;
  };

  export type MarketDataStructOutput = [
    price: bigint,
    volume24h: bigint,
    priceChange24h: bigint,
    timestamp: bigint,
    asset: string
  ] & {
    price: bigint;
    volume24h: bigint;
    priceChange24h: bigint;
    timestamp: bigint;
    asset: string;
  };

  export type SentimentDataStruct = {
    score: BigNumberish;
    volume: BigNumberish;
    timestamp: BigNumberish;
    source: string;
  };

  export type SentimentDataStructOutput = [
    score: bigint,
    volume: bigint,
    timestamp: bigint,
    source: string
  ] & { score: bigint; volume: bigint; timestamp: bigint; source: string };
}

export interface SwarmFunctionsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOwnership"
      | "authorizedCallers"
      | "dataRequests"
      | "donId"
      | "gasLimit"
      | "getAggregatedSentiment"
      | "getMarketData"
      | "getSentimentData"
      | "handleOracleFulfillment"
      | "marketData"
      | "marketDataSource"
      | "newsSentimentSource"
      | "owner"
      | "requestMarketData"
      | "requestNewsSentiment"
      | "requestTwitterSentiment"
      | "sentimentData"
      | "setAuthorizedCaller"
      | "subscriptionId"
      | "transferOwnership"
      | "twitterSentimentSource"
      | "updateSourceCode"
      | "updateSubscription"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DataFulfilled"
      | "DataRequested"
      | "MarketDataUpdated"
      | "OwnershipTransferRequested"
      | "OwnershipTransferred"
      | "RequestFulfilled"
      | "RequestSent"
      | "SentimentUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedCallers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "dataRequests",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "donId", values?: undefined): string;
  encodeFunctionData(functionFragment: "gasLimit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAggregatedSentiment",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSentimentData",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "handleOracleFulfillment",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "marketData", values: [string]): string;
  encodeFunctionData(
    functionFragment: "marketDataSource",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newsSentimentSource",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "requestMarketData",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "requestNewsSentiment",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "requestTwitterSentiment",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "sentimentData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedCaller",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "twitterSentimentSource",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateSourceCode",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSubscription",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedCallers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dataRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gasLimit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAggregatedSentiment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSentimentData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleOracleFulfillment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "marketData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketDataSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newsSentimentSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestMarketData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestNewsSentiment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestTwitterSentiment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sentimentData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "twitterSentimentSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSourceCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSubscription",
    data: BytesLike
  ): Result;
}

export namespace DataFulfilledEvent {
  export type InputTuple = [
    requestId: BytesLike,
    dataType: string,
    response: BytesLike
  ];
  export type OutputTuple = [
    requestId: string,
    dataType: string,
    response: string
  ];
  export interface OutputObject {
    requestId: string;
    dataType: string;
    response: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DataRequestedEvent {
  export type InputTuple = [
    requestId: BytesLike,
    dataType: string,
    parameters: string[],
    requester: AddressLike
  ];
  export type OutputTuple = [
    requestId: string,
    dataType: string,
    parameters: string[],
    requester: string
  ];
  export interface OutputObject {
    requestId: string;
    dataType: string;
    parameters: string[];
    requester: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketDataUpdatedEvent {
  export type InputTuple = [
    asset: string,
    price: BigNumberish,
    volume24h: BigNumberish,
    priceChange24h: BigNumberish
  ];
  export type OutputTuple = [
    asset: string,
    price: bigint,
    volume24h: bigint,
    priceChange24h: bigint
  ];
  export interface OutputObject {
    asset: string;
    price: bigint;
    volume24h: bigint;
    priceChange24h: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferRequestedEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestFulfilledEvent {
  export type InputTuple = [id: BytesLike];
  export type OutputTuple = [id: string];
  export interface OutputObject {
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestSentEvent {
  export type InputTuple = [id: BytesLike];
  export type OutputTuple = [id: string];
  export interface OutputObject {
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SentimentUpdatedEvent {
  export type InputTuple = [
    key: string,
    score: BigNumberish,
    volume: BigNumberish,
    source: string
  ];
  export type OutputTuple = [
    key: string,
    score: bigint,
    volume: bigint,
    source: string
  ];
  export interface OutputObject {
    key: string;
    score: bigint;
    volume: bigint;
    source: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SwarmFunctions extends BaseContract {
  connect(runner?: ContractRunner | null): SwarmFunctions;
  waitForDeployment(): Promise<this>;

  interface: SwarmFunctionsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  authorizedCallers: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  dataRequests: TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, string, bigint, string, boolean] & {
        requestId: bigint;
        dataType: string;
        timestamp: bigint;
        requester: string;
        fulfilled: boolean;
      }
    ],
    "view"
  >;

  donId: TypedContractMethod<[], [string], "view">;

  gasLimit: TypedContractMethod<[], [bigint], "view">;

  getAggregatedSentiment: TypedContractMethod<
    [asset: string],
    [[bigint, bigint] & { score: bigint; totalVolume: bigint }],
    "view"
  >;

  getMarketData: TypedContractMethod<
    [asset: string],
    [SwarmFunctions.MarketDataStructOutput],
    "view"
  >;

  getSentimentData: TypedContractMethod<
    [source: string, asset: string],
    [SwarmFunctions.SentimentDataStructOutput],
    "view"
  >;

  handleOracleFulfillment: TypedContractMethod<
    [requestId: BytesLike, response: BytesLike, err: BytesLike],
    [void],
    "nonpayable"
  >;

  marketData: TypedContractMethod<
    [arg0: string],
    [
      [bigint, bigint, bigint, bigint, string] & {
        price: bigint;
        volume24h: bigint;
        priceChange24h: bigint;
        timestamp: bigint;
        asset: string;
      }
    ],
    "view"
  >;

  marketDataSource: TypedContractMethod<[], [string], "view">;

  newsSentimentSource: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  requestMarketData: TypedContractMethod<
    [assets: string[]],
    [string],
    "nonpayable"
  >;

  requestNewsSentiment: TypedContractMethod<
    [assets: string[]],
    [string],
    "nonpayable"
  >;

  requestTwitterSentiment: TypedContractMethod<
    [assets: string[]],
    [string],
    "nonpayable"
  >;

  sentimentData: TypedContractMethod<
    [arg0: string],
    [
      [bigint, bigint, bigint, string] & {
        score: bigint;
        volume: bigint;
        timestamp: bigint;
        source: string;
      }
    ],
    "view"
  >;

  setAuthorizedCaller: TypedContractMethod<
    [caller: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;

  subscriptionId: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [to: AddressLike],
    [void],
    "nonpayable"
  >;

  twitterSentimentSource: TypedContractMethod<[], [string], "view">;

  updateSourceCode: TypedContractMethod<
    [dataType: string, newSource: string],
    [void],
    "nonpayable"
  >;

  updateSubscription: TypedContractMethod<
    [_subscriptionId: BigNumberish, _gasLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedCallers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "dataRequests"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, string, bigint, string, boolean] & {
        requestId: bigint;
        dataType: string;
        timestamp: bigint;
        requester: string;
        fulfilled: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "donId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "gasLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAggregatedSentiment"
  ): TypedContractMethod<
    [asset: string],
    [[bigint, bigint] & { score: bigint; totalVolume: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMarketData"
  ): TypedContractMethod<
    [asset: string],
    [SwarmFunctions.MarketDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSentimentData"
  ): TypedContractMethod<
    [source: string, asset: string],
    [SwarmFunctions.SentimentDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "handleOracleFulfillment"
  ): TypedContractMethod<
    [requestId: BytesLike, response: BytesLike, err: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "marketData"
  ): TypedContractMethod<
    [arg0: string],
    [
      [bigint, bigint, bigint, bigint, string] & {
        price: bigint;
        volume24h: bigint;
        priceChange24h: bigint;
        timestamp: bigint;
        asset: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "marketDataSource"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "newsSentimentSource"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "requestMarketData"
  ): TypedContractMethod<[assets: string[]], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "requestNewsSentiment"
  ): TypedContractMethod<[assets: string[]], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "requestTwitterSentiment"
  ): TypedContractMethod<[assets: string[]], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "sentimentData"
  ): TypedContractMethod<
    [arg0: string],
    [
      [bigint, bigint, bigint, string] & {
        score: bigint;
        volume: bigint;
        timestamp: bigint;
        source: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setAuthorizedCaller"
  ): TypedContractMethod<
    [caller: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "subscriptionId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "twitterSentimentSource"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateSourceCode"
  ): TypedContractMethod<
    [dataType: string, newSource: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateSubscription"
  ): TypedContractMethod<
    [_subscriptionId: BigNumberish, _gasLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DataFulfilled"
  ): TypedContractEvent<
    DataFulfilledEvent.InputTuple,
    DataFulfilledEvent.OutputTuple,
    DataFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "DataRequested"
  ): TypedContractEvent<
    DataRequestedEvent.InputTuple,
    DataRequestedEvent.OutputTuple,
    DataRequestedEvent.OutputObject
  >;
  getEvent(
    key: "MarketDataUpdated"
  ): TypedContractEvent<
    MarketDataUpdatedEvent.InputTuple,
    MarketDataUpdatedEvent.OutputTuple,
    MarketDataUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferRequested"
  ): TypedContractEvent<
    OwnershipTransferRequestedEvent.InputTuple,
    OwnershipTransferRequestedEvent.OutputTuple,
    OwnershipTransferRequestedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RequestFulfilled"
  ): TypedContractEvent<
    RequestFulfilledEvent.InputTuple,
    RequestFulfilledEvent.OutputTuple,
    RequestFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "RequestSent"
  ): TypedContractEvent<
    RequestSentEvent.InputTuple,
    RequestSentEvent.OutputTuple,
    RequestSentEvent.OutputObject
  >;
  getEvent(
    key: "SentimentUpdated"
  ): TypedContractEvent<
    SentimentUpdatedEvent.InputTuple,
    SentimentUpdatedEvent.OutputTuple,
    SentimentUpdatedEvent.OutputObject
  >;

  filters: {
    "DataFulfilled(bytes32,string,bytes)": TypedContractEvent<
      DataFulfilledEvent.InputTuple,
      DataFulfilledEvent.OutputTuple,
      DataFulfilledEvent.OutputObject
    >;
    DataFulfilled: TypedContractEvent<
      DataFulfilledEvent.InputTuple,
      DataFulfilledEvent.OutputTuple,
      DataFulfilledEvent.OutputObject
    >;

    "DataRequested(bytes32,string,string[],address)": TypedContractEvent<
      DataRequestedEvent.InputTuple,
      DataRequestedEvent.OutputTuple,
      DataRequestedEvent.OutputObject
    >;
    DataRequested: TypedContractEvent<
      DataRequestedEvent.InputTuple,
      DataRequestedEvent.OutputTuple,
      DataRequestedEvent.OutputObject
    >;

    "MarketDataUpdated(string,uint256,uint256,int256)": TypedContractEvent<
      MarketDataUpdatedEvent.InputTuple,
      MarketDataUpdatedEvent.OutputTuple,
      MarketDataUpdatedEvent.OutputObject
    >;
    MarketDataUpdated: TypedContractEvent<
      MarketDataUpdatedEvent.InputTuple,
      MarketDataUpdatedEvent.OutputTuple,
      MarketDataUpdatedEvent.OutputObject
    >;

    "OwnershipTransferRequested(address,address)": TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;
    OwnershipTransferRequested: TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RequestFulfilled(bytes32)": TypedContractEvent<
      RequestFulfilledEvent.InputTuple,
      RequestFulfilledEvent.OutputTuple,
      RequestFulfilledEvent.OutputObject
    >;
    RequestFulfilled: TypedContractEvent<
      RequestFulfilledEvent.InputTuple,
      RequestFulfilledEvent.OutputTuple,
      RequestFulfilledEvent.OutputObject
    >;

    "RequestSent(bytes32)": TypedContractEvent<
      RequestSentEvent.InputTuple,
      RequestSentEvent.OutputTuple,
      RequestSentEvent.OutputObject
    >;
    RequestSent: TypedContractEvent<
      RequestSentEvent.InputTuple,
      RequestSentEvent.OutputTuple,
      RequestSentEvent.OutputObject
    >;

    "SentimentUpdated(string,int256,uint256,string)": TypedContractEvent<
      SentimentUpdatedEvent.InputTuple,
      SentimentUpdatedEvent.OutputTuple,
      SentimentUpdatedEvent.OutputObject
    >;
    SentimentUpdated: TypedContractEvent<
      SentimentUpdatedEvent.InputTuple,
      SentimentUpdatedEvent.OutputTuple,
      SentimentUpdatedEvent.OutputObject
    >;
  };
}
